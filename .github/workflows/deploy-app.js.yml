name: Despliegue a Server

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:

  generar-env-angular:

    environment: production

    runs-on: ubuntu-latest

    steps:
      - run: mkdir angular-env
      - name: Crear json con environment
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "environment.json"
          json: '{
                    "name": "prod",
                    "production": true,
                    "settings": {
                                  "apiUrl": "${{secrets.ANGULAR_ENV_API_URL}}"
                                }
                 }'
          dir: 'angular-env/'

      - name: Cachear .env angular
        uses: actions/upload-artifact@v2
        with:
          name: dist-env-angular
          path: angular-env

  generar-env-docker-compose:

    environment: production

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Generar environment docker-compose
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_API_PORT: ${{secrets.DOCKER_API_PORT}}
          envkey_API_HTTPS_PORT: ${{secrets.DOCKER_API_HTTPS_PORT}}
          envkey_API_ENV: ${{secrets.DOCKER_API_ENVIRONMENT}}
          envkey_API_CERT_PASS: ${{secrets.API_CERT_PASS}}
          envkey_SQL_ROOT_PASS: ${{secrets.DOCKER_SQL_ROOT_PASS}}
          envkey_SQL_USER: ${{secrets.DOCKER_SQL_USER}}
          envkey_SQL_USER_PASS: ${{secrets.DOCKER_SQL_PASSWORD}}
          envkey_SQL_PORT: ${{secrets.DOCKER_SQL_PORT}}
          envkey_UI_PORT: ${{secrets.DOCKER_UI_PORT}}
          envkey_MARIADB_CONNECTIONSTRING: Server=${{secrets.API_SQL_SERVER}};Port=${{secrets.DOCKER_SQL_PORT}};user=${{secrets.DOCKER_SQL_USER}};Password=${{secrets.DOCKER_SQL_PASSWORD}};Database=enigma
          envkey_JWT_ISSUER: "Enigma.WebApi"
          envkey_JWT_AUDIENCE: ${{secrets.API_JWT_AUDIENCE}}
          envkey_JWT_SUBJECT: ${{secrets.API_JWT_SUBJECT}}
          envkey_JWT_KEY: ${{secrets.API_JWT_KEY}}
          envkey_CORS_ORIGINS: ${{secrets.API_CORS_ORIGINS}}
          directory: docker-compose
          file_name: .env
          fail_on_empty: true

      - name: Cachear .env docker-compose
        uses: actions/upload-artifact@v2
        with:
          name: dist-env-docker
          path: docker-compose

  build-angular:

    environment: production

    runs-on: ubuntu-latest

    needs: [generar-env-angular]
    defaults:
      run:
        working-directory: webui/enigma-ui

    steps:
      - uses: actions/checkout@v3
 
      - name: Usar Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
 
      - name: Instalar pnpm
        uses: pnpm/action-setup@v2.0.1
        id: pnpm-install
        with:
          version: 7
          run_install: false
  
      - name: Obtener directorio de almacenamiento pnpm
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
  
      - name: Configurar cache pnpm
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
  
      - name: Instalar dependencias Angular
        run: pnpm install
  
      - name: Compilar Angular
        run: pnpm run build
       
      - name: Sumar environment angular
        uses: actions/download-artifact@v2
        with:
          name: dist-env-angular
          path: webui/enigma-ui/dist/enigma-ui/assets/environments/

      - name: Cachear distribuibles Angular
        uses: actions/upload-artifact@v2
        with:
          name: dist-angular
          path: webui/enigma-ui/dist/enigma-ui/

  preparar-server:
    environment: production

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Configurar Clave SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{secrets.SSH_PRIVATE_KEY}} 
          known_hosts: unnecessary
          
      - name: Agregar Clientes Conocidos
        run: ssh-keyscan -p ${{secrets.SSH_PORT}} -H ${{secrets.SSH_HOST}}  >> ~/.ssh/known_hosts
  
      - name: Crear carpetas para despliegue si no existen 
        uses: D3rHase/ssh-command-action@v0.2.1
        with:
          HOST: ${{secrets.SSH_HOST}}
          PORT: ${{secrets.SSH_PORT}}
          USER: ${{secrets.SSH_USER}}
          PRIVATE_SSH_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          COMMAND: |
            mkdir -p ${{secrets.DEPLOY_PATH}}
            mkdir -p ${{secrets.DEPLOY_PATH}}/www/ui
            mkdir -p ${{secrets.DEPLOY_PATH}}/.tmp/enigmaapiproj
   

  generar-imagen-docker-api:

    environment: production

    needs: [preparar-server]

    runs-on: ubuntu-latest

    steps:
      
      - uses: actions/checkout@v3
      
      - name: Configurar Clave SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{secrets.SSH_PRIVATE_KEY}} 
          known_hosts: unnecessary
          
      - name: Agregar Clientes Conocidos
        run: ssh-keyscan -p ${{secrets.SSH_PORT}} -H ${{secrets.SSH_HOST}}  >> ~/.ssh/known_hosts

      - name: Copiar temporalmente proyecto de API con rsync
        run: rsync -avz -e "ssh -p ${{secrets.SSH_PORT}}" webapi/EnigmaBudget/ ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${{secrets.DEPLOY_PATH}}/.tmp/enigmaapiproj
  
      - name: Generar Imagen Docker
        uses: D3rHase/ssh-command-action@v0.2.1
        with:
          HOST: ${{secrets.SSH_HOST}}
          PORT: ${{secrets.SSH_PORT}}
          USER: ${{secrets.SSH_USER}}
          PRIVATE_SSH_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          COMMAND: |
            cd ${{secrets.DEPLOY_PATH}}/.tmp/enigmaapiproj
            docker build --no-cache -t enigmabudgetapi .
      
      - name: Limpiar temporal
        uses: D3rHase/ssh-command-action@v0.2.1
        with:
          HOST: ${{secrets.SSH_HOST}}
          PORT: ${{secrets.SSH_PORT}}
          USER: ${{secrets.SSH_USER}}
          PRIVATE_SSH_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          COMMAND: rm -f -r ${{secrets.DEPLOY_PATH}}/.tmp

  deploy-a-server:

    needs: [preparar-server, generar-env-docker-compose, build-angular, generar-imagen-docker-api]

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v3
      - name: Configurar Clave SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{secrets.SSH_PRIVATE_KEY}} 
          known_hosts: unnecessary
          
      - name: Agregar Clientes Conocidos
        run: ssh-keyscan -p ${{secrets.SSH_PORT}} -H ${{secrets.SSH_HOST}}  >> ~/.ssh/known_hosts
  
    
      - name: Restaurar artifact docker-compose
        uses: actions/download-artifact@v2
        with:
          name: dist-env-docker
          path: docker-compose

      - name: Copiar docker-compose a Server
        run: rsync -avz -e "ssh -p ${{secrets.SSH_PORT}}" docker-compose/ ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${{secrets.DEPLOY_PATH}}

      - name: Restaurar artifact de distribuibles Angular
        uses: actions/download-artifact@v2
        with:
          name: dist-angular
          path: dist-angular

      - name: Copiar distribuibles Angular a Server
        run: rsync -avz -e "ssh -p ${{secrets.SSH_PORT}}" dist-angular/ ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${{secrets.DEPLOY_PATH}}/www/ui  

      - name: Volver a ejecutar docker-compose
        uses: D3rHase/ssh-command-action@v0.2.1
        with:
          HOST: ${{secrets.SSH_HOST}}
          PORT: ${{secrets.SSH_PORT}}
          USER: ${{secrets.SSH_USER}}
          PRIVATE_SSH_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          COMMAND: |
            cd ${{secrets.DEPLOY_PATH}}
            docker-compose up -d
            
      - name: Limpiar artifacts
        uses: geekyeggo/delete-artifact@v1
        with: 
          name: |
            dist-env-docker
            dist-env-angular
